# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 52d058c4de8c1918cb6f5b97a5e8349b19bf93ee6698a36c3b0649e12dd2b2a0 # shrinks to (initial_state, transitions, seen_counter) = (RefAutomaton { blocks: [Block { kernel: BlockKernel { header: BlockHeader { version: BFieldElement(0), height: BlockHeight(BFieldElement(0)), prev_block_digest: Digest([BFieldElement(0), BFieldElement(0), BFieldElement(0), BFieldElement(0), BFieldElement(0)]), timestamp: Timestamp(BFieldElement(7752766436806271600)), nonce: Digest([BFieldElement(0), BFieldElement(0), BFieldElement(0), BFieldElement(0), BFieldElement(0)]), cumulative_proof_of_work: ProofOfWork([0, 0, 0, 0, 0, 0]), difficulty: Difficulty([1000, 0, 0, 0, 0]) }, body: BlockBody { transaction_kernel: TransactionKernel { inputs: [], outputs: [AdditionRecord { canonical_commitment: Digest([BFieldElement(14474936574811235595), BFieldElement(12075459962335368241), BFieldElement(9284402858390547317), BFieldElement(13289234249507716493), BFieldElement(14604778591091973679)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(12790224124631762334), BFieldElement(14767099868141762721), BFieldElement(11735564245172386204), BFieldElement(1421675205842171557), BFieldElement(13362504935428883536)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(3001613099063152000), BFieldElement(7046156160694233470), BFieldElement(9367740698010063507), BFieldElement(9325119578076225363), BFieldElement(17267681781946576329)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(11740239815256376850), BFieldElement(11372165875181386525), BFieldElement(10857212117667456744), BFieldElement(3648667773979396124), BFieldElement(11364388702199950726)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(3021167858051737118), BFieldElement(1268057609299823233), BFieldElement(15952789584263014059), BFieldElement(7069648269069477373), BFieldElement(16454106211013201520)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(3291341170470603765), BFieldElement(14212146691962603799), BFieldElement(207382298513692674), BFieldElement(14796190681561989339), BFieldElement(11510748844012627231)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(5637890967284051592), BFieldElement(6721835681690273913), BFieldElement(10320650565135985464), BFieldElement(16951839568778323533), BFieldElement(7246744584092557758)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(2449451637880815865), BFieldElement(2508226489733059118), BFieldElement(2026634649011578859), BFieldElement(13277586532564265650), BFieldElement(12587098908403633455)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(6771221221741569314), BFieldElement(7850436679631254078), BFieldElement(9725691867103082128), BFieldElement(1339599362787192947), BFieldElement(5842734090482573648)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(5825465237384709714), BFieldElement(10758710170803085812), BFieldElement(242865725056207514), BFieldElement(829706438114993967), BFieldElement(4130360539780028096)]) }, AdditionRecord { canonical_commitment: Digest([BFieldElement(2309948579215838217), BFieldElement(1919245946799894064), BFieldElement(2439544328402514687), BFieldElement(2069758484820891360), BFieldElement(4614163771563227764)]) }], public_announcements: [], fee: NeptuneCoins(0), coinbase: Some(NeptuneCoins(53376000000000000000000000000000000)), timestamp: Timestamp(BFieldElement(7752766436806271600)), mutator_set_hash: Digest([BFieldElement(6356079042920026508), BFieldElement(15211642411200992722), BFieldElement(2680497332574185296), BFieldElement(1540366693333899803), BFieldElement(13393016402719134147)]), merge_bit: false, mast_sequences: OnceLock(<uninit>) }, mutator_set_accumulator: MutatorSetAccumulator { aocl: MmrAccumulator { leaf_count: 11, peaks: [Digest([BFieldElement(13819551205573196330), BFieldElement(10152588070651750747), BFieldElement(16611320915366067404), BFieldElement(9749193262851524690), BFieldElement(9136488603219244993)]), Digest([BFieldElement(18008225505138469644), BFieldElement(18391896126088904933), BFieldElement(15322312189882630345), BFieldElement(9322368925635734698), BFieldElement(11290879773192956736)]), Digest([BFieldElement(2309948579215838217), BFieldElement(1919245946799894064), BFieldElement(2439544328402514687), BFieldElement(2069758484820891360), BFieldElement(4614163771563227764)])] }, swbf_inactive: MmrAccumulator { leaf_count: 1, peaks: [Digest([BFieldElement(2601061083079351008), BFieldElement(10241907525269500831), BFieldElement(10191418521810101596), BFieldElement(14716004276229115775), BFieldElement(4008409057822087875)])] }, swbf_active: ActiveWindow { sbf: [] } }, lock_free_mmr_accumulator: MmrAccumulator { leaf_count: 0, peaks: [] }, block_mmr_accumulator: MmrAccumulator { leaf_count: 0, peaks: [] }, merkle_tree: OnceLock(<uninit>) }, appendix: BlockAppendix { claims: [] } }, proof: Genesis, digest: OnceLock(<uninit>) }], sync_stage: None }, [BlockNotificationRequest], None)
