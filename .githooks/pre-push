#!/bin/bash
# Pre-push hook for Neptune Core
# Runs comprehensive checks before pushing to remote
#
# Installation:
#   git config core.hooksPath .githooks
#   chmod +x .githooks/pre-push

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
export CMAKE_POLICY_VERSION_MINIMUM=3.5
SKIP_HOOKS="${SKIP_HOOKS:-false}"

# Check if we should skip hooks
if [ "$SKIP_HOOKS" = "true" ]; then
    echo -e "${YELLOW}⚠️  Skipping pre-push hooks (SKIP_HOOKS=true)${NC}"
    exit 0
fi

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Print header
echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}🚀 Running Pre-Push Checks${NC}"
echo -e "${BLUE}Branch: $CURRENT_BRANCH${NC}"
echo -e "${BLUE}================================${NC}"
echo ""

# Track overall status
ERRORS=0
WARNINGS=0

# Function to print section headers
print_section() {
    echo -e "${BLUE}▶ $1${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}❌ $1${NC}"
    ERRORS=$((ERRORS + 1))
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    WARNINGS=$((WARNINGS + 1))
}

# =============================================================================
# 1. BRANCH PROTECTION CHECK
# =============================================================================
print_section "1. Branch Protection Check"

# Warn if pushing to master/main
if [ "$CURRENT_BRANCH" = "master" ] || [ "$CURRENT_BRANCH" = "main" ]; then
    print_warning "Pushing directly to $CURRENT_BRANCH"
    echo -e "${YELLOW}Consider pushing to develop branch instead${NC}"
    echo -e "${YELLOW}Press Enter to continue or Ctrl+C to abort...${NC}"
    read -r
fi

# =============================================================================
# 2. FULL BUILD CHECK (only on master/main/develop)
# =============================================================================
if [ "$CURRENT_BRANCH" = "master" ] || [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "develop" ]; then
    print_section "2. Full Build Check (Release)"

    echo "Building release binaries..."
    if cargo build --release --workspace > /dev/null 2>&1; then
        print_success "Release build successful"
    else
        print_error "Release build failed"
        echo -e "${YELLOW}Run: cargo build --release --workspace${NC}"
        exit 1
    fi
else
    print_section "2. Quick Build Check (Debug)"

    echo "Running quick debug build..."
    if cargo check --workspace > /dev/null 2>&1; then
        print_success "Debug build successful"
    else
        print_error "Build check failed"
        echo -e "${YELLOW}Run: cargo check --workspace${NC}"
        exit 1
    fi
fi

# =============================================================================
# 3. TEST SUITE (only on master/main/develop)
# =============================================================================
if [ "$CURRENT_BRANCH" = "master" ] || [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "develop" ]; then
    print_section "3. Comprehensive Test Suite"
    
    echo "Running full test suite (this may take a while)..."
    TEST_OUTPUT=$(cargo test --workspace --lib --bins --tests 2>&1 || true)
    
    if echo "$TEST_OUTPUT" | grep -q "test result: FAILED"; then
        print_error "Tests failed"
        echo "$TEST_OUTPUT" | grep -A 10 "FAILED"
        exit 1
    else
        PASSED=$(echo "$TEST_OUTPUT" | grep "test result:" | tail -1 | grep -oP '\d+(?= passed)' || echo "0")
        print_success "All tests passed ($PASSED tests)"
    fi
else
    print_success "Skipping tests on feature branch (will run in CI)"
fi

# =============================================================================
# 4. DOCUMENTATION BUILD
# =============================================================================
print_section "4. Documentation Build"

if cargo doc --no-deps --workspace --document-private-items > /dev/null 2>&1; then
    print_success "Documentation builds successfully"
else
    print_error "Documentation build failed"
    echo -e "${YELLOW}Run: cargo doc --workspace${NC}"
    exit 1
fi

# =============================================================================
# 5. P2P MODULE VERIFICATION
# =============================================================================
print_section "5. P2P Module Verification"

# Check if P2P module exists
if [ ! -d "neptune-core/src/p2p" ]; then
    print_error "P2P module directory not found"
    exit 1
fi

# Check critical P2P components
CRITICAL_P2P_FILES=(
    "neptune-core/src/p2p/state/reputation.rs"
    "neptune-core/src/p2p/state/connection_tracker.rs"
    "neptune-core/src/p2p/connection/validator.rs"
    "neptune-core/src/p2p/connection/acceptor.rs"
    "neptune-core/src/p2p/connection/initiator.rs"
    "neptune-core/src/p2p/protocol/handler.rs"
)

P2P_MISSING=0
for file in "${CRITICAL_P2P_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        print_error "Critical P2P file missing: $file"
        P2P_MISSING=$((P2P_MISSING + 1))
    fi
done

if [ $P2P_MISSING -eq 0 ]; then
    print_success "All critical P2P components present"
else
    print_error "$P2P_MISSING critical P2P components missing"
    exit 1
fi

# Run P2P tests
echo "Running P2P tests..."
if cargo test --package neptune_cash --lib p2p > /dev/null 2>&1; then
    print_success "P2P tests passed"
else
    print_error "P2P tests failed"
    exit 1
fi

# =============================================================================
# 6. SECURITY AUDIT
# =============================================================================
print_section "6. Security Audit"

if command -v cargo-audit &> /dev/null; then
    AUDIT_OUTPUT=$(cargo audit 2>&1 || true)

    if echo "$AUDIT_OUTPUT" | grep -qE "error:|vulnerability"; then
        # Check severity
        HIGH_VULN=$(echo "$AUDIT_OUTPUT" | grep -i "high" || true)
        CRITICAL_VULN=$(echo "$AUDIT_OUTPUT" | grep -i "critical" || true)

        if [ -n "$HIGH_VULN" ] || [ -n "$CRITICAL_VULN" ]; then
            print_error "High/Critical security vulnerabilities found"
            echo "$AUDIT_OUTPUT"

            if [ "$CURRENT_BRANCH" = "master" ] || [ "$CURRENT_BRANCH" = "main" ]; then
                echo -e "${RED}Blocking push to $CURRENT_BRANCH due to security issues${NC}"
                exit 1
            else
                print_warning "Security vulnerabilities found, but allowing push to $CURRENT_BRANCH"
                echo -e "${YELLOW}Fix vulnerabilities before merging to master${NC}"
            fi
        else
            print_warning "Low severity vulnerabilities found"
            echo "$AUDIT_OUTPUT" | grep -A 3 "vulnerability"
        fi
    else
        print_success "No security vulnerabilities found"
    fi
else
    print_warning "cargo-audit not installed (recommended)"
    echo -e "${YELLOW}Install with: cargo install cargo-audit${NC}"
fi

# =============================================================================
# 7. CODE QUALITY METRICS
# =============================================================================
print_section "7. Code Quality Metrics"

# Count warnings
echo "Checking warning count..."
WARNING_OUTPUT=$(cargo build --workspace 2>&1 || true)
WARNING_COUNT=$(echo "$WARNING_OUTPUT" | grep -c "^warning:" || echo "0")

echo -e "Current warnings: ${YELLOW}$WARNING_COUNT${NC}"

if [ "$WARNING_COUNT" -gt 150 ]; then
    print_warning "Warning count is high ($WARNING_COUNT > 150)"
    echo -e "${YELLOW}Goal: Reduce to < 50 warnings${NC}"
elif [ "$WARNING_COUNT" -gt 100 ]; then
    echo -e "${YELLOW}ℹ️  Warning count: $WARNING_COUNT (target: < 50)${NC}"
else
    print_success "Warning count is acceptable ($WARNING_COUNT < 100)"
fi

# Count TODO/FIXME
TODO_COUNT=$(find neptune-core/src -name "*.rs" -type f -exec grep -E '\b(TODO|FIXME)\b' {} \; 2>/dev/null | wc -l || echo "0")
echo -e "TODOs/FIXMEs in code: ${YELLOW}$TODO_COUNT${NC}"

# =============================================================================
# 8. CLIPPY COMPREHENSIVE CHECK
# =============================================================================
print_section "8. Clippy Comprehensive Check"

echo "Running clippy (pedantic mode)..."
CLIPPY_OUTPUT=$(cargo clippy --all-targets --workspace -- -W clippy::pedantic 2>&1 || true)

CLIPPY_ERRORS=$(echo "$CLIPPY_OUTPUT" | grep -c "^error:" || echo "0")
CLIPPY_WARNINGS=$(echo "$CLIPPY_OUTPUT" | grep -c "^warning:" || echo "0")

if [ "$CLIPPY_ERRORS" -gt 0 ]; then
    print_error "Clippy found $CLIPPY_ERRORS error(s)"
    echo "$CLIPPY_OUTPUT" | grep -A 5 "^error:" | head -20
    exit 1
elif [ "$CLIPPY_WARNINGS" -gt 0 ]; then
    print_warning "Clippy found $CLIPPY_WARNINGS warning(s)"
else
    print_success "No clippy issues found"
fi

# =============================================================================
# 9. COMMIT HISTORY CHECK
# =============================================================================
print_section "9. Commit History Check"

# Get unpushed commits
REMOTE_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo "")

if [ -n "$REMOTE_BRANCH" ]; then
    UNPUSHED=$(git log "$REMOTE_BRANCH"..HEAD --oneline | wc -l)
    echo -e "Unpushed commits: ${GREEN}$UNPUSHED${NC}"

    # Show commits
    if [ "$UNPUSHED" -gt 0 ]; then
        echo "Commits to be pushed:"
        git log "$REMOTE_BRANCH"..HEAD --oneline | head -10

        if [ "$UNPUSHED" -gt 10 ]; then
            echo "... and $((UNPUSHED - 10)) more"
        fi
    fi
else
    print_warning "No remote tracking branch configured"
fi

# =============================================================================
# 10. BRANCH-SPECIFIC CHECKS
# =============================================================================
print_section "10. Branch-Specific Checks"

case "$CURRENT_BRANCH" in
    master|main)
        echo -e "${YELLOW}Strict checks for $CURRENT_BRANCH branch${NC}"

        # Enforce zero clippy errors
        if [ "$CLIPPY_ERRORS" -gt 0 ]; then
            print_error "Clippy errors not allowed on $CURRENT_BRANCH"
            exit 1
        fi

        # Enforce documentation
        if ! cargo doc --no-deps --workspace --document-private-items 2>&1 | grep -q "Finished"; then
            print_error "Documentation build must succeed on $CURRENT_BRANCH"
            exit 1
        fi

        print_success "All $CURRENT_BRANCH requirements met"
        ;;

    develop)
        echo -e "${BLUE}Standard checks for develop branch${NC}"
        print_success "Develop branch checks passed"
        ;;

    feature/*|fix/*|hotfix/*)
        echo -e "${BLUE}Standard checks for feature branch${NC}"
        print_success "Feature branch checks passed"
        ;;

    *)
        print_warning "Unknown branch pattern: $CURRENT_BRANCH"
        ;;
esac

# =============================================================================
# SUMMARY
# =============================================================================
echo ""
echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}📊 Pre-Push Summary${NC}"
echo -e "${BLUE}================================${NC}"

# Show metrics
echo -e "Branch: ${GREEN}$CURRENT_BRANCH${NC}"
echo -e "Warnings: ${YELLOW}$WARNING_COUNT${NC}"
echo -e "TODOs/FIXMEs: ${YELLOW}$TODO_COUNT${NC}"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "All checks passed! Ready to push."
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}⚠️  $WARNINGS warning(s) found${NC}"

    if [ "$CURRENT_BRANCH" = "master" ] || [ "$CURRENT_BRANCH" = "main" ]; then
        print_warning "Consider addressing warnings before pushing to $CURRENT_BRANCH"
        echo -e "${YELLOW}Press Enter to continue or Ctrl+C to abort...${NC}"
        read -r
    fi

    echo -e "${GREEN}Proceeding with push...${NC}"
    exit 0
else
    echo -e "${RED}❌ $ERRORS error(s) found${NC}"
    echo -e "${RED}❌ Push blocked${NC}"
    echo ""
    echo -e "${YELLOW}To skip pre-push hooks (not recommended):${NC}"
    echo -e "${YELLOW}  SKIP_HOOKS=true git push${NC}"
    echo -e "${YELLOW}  or${NC}"
    echo -e "${YELLOW}  git push --no-verify${NC}"
    exit 1
fi

