#!/bin/bash
# Pre-commit hook for Neptune Core
# Ensures code quality before commits reach CI/CD
#
# Installation:
#   git config core.hooksPath .githooks
#   chmod +x .githooks/pre-commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
export CMAKE_POLICY_VERSION_MINIMUM=3.5
SKIP_HOOKS="${SKIP_HOOKS:-false}"

# Check if we should skip hooks
if [ "$SKIP_HOOKS" = "true" ]; then
    echo -e "${YELLOW}⚠️  Skipping pre-commit hooks (SKIP_HOOKS=true)${NC}"
    exit 0
fi

# Print header
echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}🔍 Running Pre-Commit Checks${NC}"
echo -e "${BLUE}================================${NC}"
echo ""

# Track overall status
ERRORS=0
WARNINGS=0

# Function to print section headers
print_section() {
    echo -e "${BLUE}▶ $1${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}❌ $1${NC}"
    ERRORS=$((ERRORS + 1))
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    WARNINGS=$((WARNINGS + 1))
}

# Function to check if cargo command exists
check_cargo() {
    if ! command -v cargo &> /dev/null; then
        print_error "cargo not found. Please install Rust toolchain."
        exit 1
    fi
}

# Function to check if rustfmt is installed
check_rustfmt() {
    if ! cargo fmt --version &> /dev/null; then
        print_error "rustfmt not installed. Run: rustup component add rustfmt"
        exit 1
    fi
}

# Function to check if clippy is installed
check_clippy() {
    if ! cargo clippy --version &> /dev/null; then
        print_error "clippy not installed. Run: rustup component add clippy"
        exit 1
    fi
}

# Get list of staged Rust files
STAGED_RS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.rs$' || true)

if [ -z "$STAGED_RS_FILES" ]; then
    echo -e "${YELLOW}ℹ️  No Rust files staged for commit${NC}"
    exit 0
fi

echo -e "Checking ${GREEN}$(echo "$STAGED_RS_FILES" | wc -l)${NC} staged Rust file(s)\n"

# Check prerequisites
check_cargo
check_rustfmt
check_clippy

# =============================================================================
# 1. FORMAT CHECK
# =============================================================================
print_section "1. Formatting Check (cargo fmt)"

if cargo fmt --all -- --check > /dev/null 2>&1; then
    print_success "Code is properly formatted"
else
    print_error "Code formatting issues found"
    echo -e "${YELLOW}Run: cargo fmt --all${NC}"
    echo ""
    echo "Showing formatting diff:"
    cargo fmt --all -- --check 2>&1 | head -20
    exit 1
fi

# =============================================================================
# 2. CLIPPY LINTS
# =============================================================================
print_section "2. Clippy Lints (cargo clippy)"

# Run clippy on staged files
CLIPPY_OUTPUT=$(cargo clippy --all-targets --workspace -- -D clippy::all 2>&1 || true)

if echo "$CLIPPY_OUTPUT" | grep -q "error:"; then
    print_error "Clippy found errors"
    echo "$CLIPPY_OUTPUT" | grep -A 5 "error:"
    exit 1
elif echo "$CLIPPY_OUTPUT" | grep -q "warning:"; then
    WARNING_COUNT=$(echo "$CLIPPY_OUTPUT" | grep -c "^warning:" || true)
    print_warning "Clippy found $WARNING_COUNT warning(s)"
    echo -e "${YELLOW}Consider fixing warnings before committing${NC}"
    echo "$CLIPPY_OUTPUT" | grep -A 2 "^warning:" | head -20
else
    print_success "No clippy issues found"
fi

# =============================================================================
# 3. BUILD CHECK
# =============================================================================
print_section "3. Build Check (cargo check)"

if cargo check --workspace --all-features > /dev/null 2>&1; then
    print_success "Build check passed"
else
    print_error "Build check failed"
    echo -e "${YELLOW}Run: cargo check --workspace --all-features${NC}"
    cargo check --workspace --all-features 2>&1 | tail -20
    exit 1
fi

# =============================================================================
# 4. TEST CHECK (Quick)
# =============================================================================
print_section "4. Quick Test Check (affected modules only)"

# Extract crate names from staged files
AFFECTED_CRATES=$(echo "$STAGED_RS_FILES" | grep -oP '(neptune-core|neptune-core-cli|neptune-dashboard)(?=/)' | sort -u || true)

if [ -n "$AFFECTED_CRATES" ]; then
    for crate in $AFFECTED_CRATES; do
        echo "Testing crate: $crate"
        if cargo test --package "$(echo $crate | sed 's/-/_/g')" --lib > /dev/null 2>&1; then
            print_success "$crate tests passed"
        else
            print_error "$crate tests failed"
            echo -e "${YELLOW}Run: cargo test --package $(echo $crate | sed 's/-/_/g')${NC}"
            exit 1
        fi
    done
else
    echo -e "${YELLOW}ℹ️  No specific crates affected, skipping quick test${NC}"
fi

# =============================================================================
# 5. P2P MODULE CHECK (if P2P files changed)
# =============================================================================
P2P_FILES=$(echo "$STAGED_RS_FILES" | grep 'neptune-core/src/p2p' || true)

if [ -n "$P2P_FILES" ]; then
    print_section "5. P2P Module Check (P2P files detected)"

    # Check P2P module structure
    REQUIRED_P2P_FILES=(
        "neptune-core/src/p2p/state/reputation.rs"
        "neptune-core/src/p2p/state/connection_tracker.rs"
        "neptune-core/src/p2p/connection/validator.rs"
    )

    for file in "${REQUIRED_P2P_FILES[@]}"; do
        if [ ! -f "$file" ]; then
            print_error "Required P2P file missing: $file"
            exit 1
        fi
    done

    print_success "P2P module structure intact"

    # Run P2P tests
    echo "Running P2P unit tests..."
    if cargo test --package neptune_cash --lib p2p > /dev/null 2>&1; then
        print_success "P2P tests passed"
    else
        print_error "P2P tests failed"
        echo -e "${YELLOW}Run: cargo test --package neptune_cash --lib p2p${NC}"
        exit 1
    fi
fi

# =============================================================================
# 6. SECURITY CHECK
# =============================================================================
print_section "6. Security Check (cargo audit)"

if command -v cargo-audit &> /dev/null; then
    AUDIT_OUTPUT=$(cargo audit 2>&1 || true)

    if echo "$AUDIT_OUTPUT" | grep -q "error:"; then
        print_error "Security vulnerabilities found"
        echo "$AUDIT_OUTPUT" | grep -A 5 "error:"
        echo -e "${YELLOW}Review and fix vulnerabilities before committing${NC}"
        # Don't block commit, but warn
        WARNINGS=$((WARNINGS + 1))
    else
        print_success "No security vulnerabilities found"
    fi
else
    print_warning "cargo-audit not installed (optional)"
    echo -e "${YELLOW}Install with: cargo install cargo-audit${NC}"
fi

# =============================================================================
# 7. CODE PATTERN CHECKS
# =============================================================================
print_section "7. Code Pattern Checks"

# Check for common issues in staged files
PATTERN_ISSUES=0

# Check for TODO/FIXME/XXX/HACK
if echo "$STAGED_RS_FILES" | xargs grep -n -E '\b(TODO|FIXME|XXX|HACK)\b' 2>/dev/null; then
    print_warning "Found TODO/FIXME/HACK comments in staged files"
    echo -e "${YELLOW}Consider addressing these before committing${NC}"
fi

# Check for println! in non-test code
if echo "$STAGED_RS_FILES" | xargs grep -n 'println!' 2>/dev/null | grep -v '#\[cfg(test)\]' | grep -v '#\[test\]'; then
    print_warning "Found println! in non-test code (use tracing instead)"
fi

# Check for unwrap() calls
UNWRAP_COUNT=$(echo "$STAGED_RS_FILES" | xargs grep -c '\.unwrap()' 2>/dev/null | awk -F: '{s+=$2}END{print s}' || echo "0")
if [ "$UNWRAP_COUNT" -gt 0 ]; then
    print_warning "Found $UNWRAP_COUNT unwrap() calls (consider using ? or expect() with context)"
fi

# Check for dbg! macro
if echo "$STAGED_RS_FILES" | xargs grep -n 'dbg!' 2>/dev/null; then
    print_warning "Found dbg! macro (remove before committing)"
fi

# =============================================================================
# 8. FILE SIZE CHECK
# =============================================================================
print_section "8. File Size Check"

LARGE_FILES=$(echo "$STAGED_RS_FILES" | while read -r file; do
    if [ -f "$file" ]; then
        LINES=$(wc -l < "$file")
        if [ "$LINES" -gt 1000 ]; then
            echo "$file ($LINES lines)"
        fi
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    print_warning "Large files detected (>1000 lines):"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}Consider refactoring large files${NC}"
fi

# =============================================================================
# 9. COMMIT MESSAGE CHECK
# =============================================================================
print_section "9. Commit Message Check"

# Get commit message (if available)
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(head -1 "$COMMIT_MSG_FILE")

    # Check commit message format (conventional commits)
    if ! echo "$COMMIT_MSG" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: .+'; then
        print_warning "Commit message doesn't follow conventional commits format"
        echo -e "${YELLOW}Recommended format: <type>(<scope>): <description>${NC}"
        echo -e "${YELLOW}Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert${NC}"
    fi

    # Check commit message length
    if [ "${#COMMIT_MSG}" -lt 10 ]; then
        print_warning "Commit message is very short (< 10 chars)"
    fi

    if [ "${#COMMIT_MSG}" -gt 72 ]; then
        print_warning "Commit message first line is long (> 72 chars)"
    fi
fi

# =============================================================================
# SUMMARY
# =============================================================================
echo ""
echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}📊 Pre-Commit Summary${NC}"
echo -e "${BLUE}================================${NC}"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "All checks passed! Ready to commit."
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}⚠️  $WARNINGS warning(s) found${NC}"
    echo -e "${YELLOW}Consider addressing warnings before committing${NC}"
    echo ""
    echo -e "${GREEN}Proceeding with commit...${NC}"
    exit 0
else
    echo -e "${RED}❌ $ERRORS error(s) found${NC}"
    echo -e "${RED}❌ Commit blocked${NC}"
    echo ""
    echo -e "${YELLOW}To skip pre-commit hooks (not recommended):${NC}"
    echo -e "${YELLOW}  SKIP_HOOKS=true git commit${NC}"
    echo -e "${YELLOW}  or${NC}"
    echo -e "${YELLOW}  git commit --no-verify${NC}"
    exit 1
fi

